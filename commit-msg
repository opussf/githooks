#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

#echo "\n" >> "$1"
# curl -s (silent)
#      -m 5 max time
MOD=$(curl -sm 5 'http://www.zz9-za.com/~opus/RF/last')
MOD=${MOD:-"<no random message>"}

# Find where the comments start.
COMMENT_LINE=`awk '/^#.*/ {print NR; exit 0; }' $1`

echo $COMMENT_LINE

MSG=`head -n$(($COMMENT_LINE-1)) $1`
TAIL=`tail -n+$COMMENT_LINE $1`

echo "$MSG\n\n$MOD\n$TAIL" > $1



# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.
#
#test "" = "$(grep '^Signed-off-by: ' "$1" |
#	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
#	echo >&2 Duplicate Signed-off-by lines.
#	exit 1
#}
